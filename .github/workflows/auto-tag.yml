name: Auto Tag and Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

jobs:
  auto-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tag detection

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, or use v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Latest tag: ${LATEST_TAG}"

      - name: Determine version bump
        id: bump_type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Default to patch
          BUMP="patch"

          # Check PR title for semver keywords (case insensitive)
          if echo "$PR_TITLE" | grep -iE '^\[major\]|^major:|breaking change|BREAKING CHANGE'; then
            BUMP="major"
          elif echo "$PR_TITLE" | grep -iE '^\[minor\]|^minor:|feature:|feat:'; then
            BUMP="minor"
          elif echo "$PR_TITLE" | grep -iE '^\[patch\]|^patch:|fix:|bugfix:'; then
            BUMP="patch"
          fi

          # Check PR labels
          if echo "$PR_LABELS" | grep -q "breaking"; then
            BUMP="major"
          elif echo "$PR_LABELS" | grep -q "feature\|enhancement"; then
            BUMP="minor"
          elif echo "$PR_LABELS" | grep -q "bug\|bugfix\|fix"; then
            BUMP="patch"
          fi

          # Check for skip-release label
          if echo "$PR_LABELS" | grep -q "skip-release\|no-release"; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping release due to skip-release label"
            exit 0
          fi

          echo "bump_type=${BUMP}" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "Version bump type: ${BUMP}"

      - name: Calculate new version
        if: steps.bump_type.outputs.skip != 'true'
        id: new_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"

          # Remove 'v' prefix and split into components
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Ensure numeric values
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # Bump version based on type
          if [ "$BUMP_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "version_no_v=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"

      - name: Update manifest.json
        if: steps.bump_type.outputs.skip != 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version_no_v }}"

          # Update version in manifest.json
          sed -i 's/"version": ".*"/"version": "'"${NEW_VERSION}"'"/' custom_components/inmet_weather/manifest.json

          # Verify the change
          echo "Updated manifest.json:"
          grep version custom_components/inmet_weather/manifest.json

      - name: Commit manifest update
        if: steps.bump_type.outputs.skip != 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add custom_components/inmet_weather/manifest.json
          git commit -m "chore: bump version to ${NEW_VERSION}" || echo "No changes to commit"
          git push origin main

      - name: Create and push tag
        if: steps.bump_type.outputs.skip != 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          # Create annotated tag
          git tag -a "${NEW_VERSION}" -m "Release ${NEW_VERSION}\n\nPR #${PR_NUMBER}: ${PR_TITLE}\nAuthor: @${PR_AUTHOR}\n\nAutomatically created by Auto Tag workflow"

          git push origin "${NEW_VERSION}"
          echo "Created and pushed tag: ${NEW_VERSION}"

      - name: Create release notes
        if: steps.bump_type.outputs.skip != 'true'
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Generate changelog
          CHANGELOG=$(cat <<EOF
          ## Changes

          ### Pull Request #${PR_NUMBER}: ${PR_TITLE}

          **Author:** @${PR_AUTHOR}

          ${PR_BODY}

          ## Commits
          .

          EOF
          )

          # Get commits between tags
          if [ "${LATEST_TAG}" != "v0.0.0" ]; then
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline --no-merges)
             
            CHANGELOG="${CHANGELOG}\n${COMMITS}"
          fi

          # Save to file for GitHub release
          echo "${CHANGELOG}" > release_notes.md

          echo "Release notes generated"

      - name: Create GitHub Release
        if: steps.bump_type.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: "Release ${{ steps.new_version.outputs.new_version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        if: steps.bump_type.outputs.skip != 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          BUMP_TYPE="${{ steps.bump_type.outputs.bump_type }}"

          echo "### 🎉 Auto Tag Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type:** ${BUMP_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "✅ manifest.json updated" >> $GITHUB_STEP_SUMMARY
          echo "✅ GitHub Release created" >> $GITHUB_STEP_SUMMARY

      - name: Skip Release Summary
        if: steps.bump_type.outputs.skip == 'true'
        run: |
          echo "### ⏭️ Release Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "PR has 'skip-release' or 'no-release' label." >> $GITHUB_STEP_SUMMARY
          echo "No tag or release created." >> $GITHUB_STEP_SUMMARY
